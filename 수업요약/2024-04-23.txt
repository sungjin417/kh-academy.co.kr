var는 ES6 이전에 주로 사용되던 변수 선언 키워드로,
 함수 스코프를 가집니다.
 함수 내에서만 지역 변수로 작동하고, 
 함수 외부에서는 전역 변수로 작동

let과 const는 ES6에서 도입된 변수 선언 키워드로, 
 '블록 스코프'를 가집니다. 
 let과 const로 선언된 변수가 중괄호({})로
 둘러싸인 블록 내에서만 유효

왜냐하면 var로 선언된 변수는 호이스팅되어 함수나 전역 스코프의 최상단으로 끌어올려지기 때문입니다.
 반면, let과 const는 호이스팅은 되지만, 
 선언 전에 접근할 수 없는 '일시적 사각지대(Temporal Dead Zone, TDZ)'를 가집니다.

호이스팅의 동작 원리
호이스팅은 자바스크립트에서 변수와 함수 선언을 코드의 최상단으로 끌어올리는 동작을 말합니다. 
이는 코드를 실행하기 전에 변수와 함수 선언이 메모리에 저장되기 때문에 가능합니다.

var로 선언된 변수는 선언과 동시에 undefined로 초기화되며, 이후 실제 값으로 할당됩니다. 
이로 인해 var로 선언된 변수는 선언 전에도 접근할 수 있으나, undefined 값을 가집니다.

반면, let과 const는 호이스팅되지만, 초기화되지 않습니다. 
따라서 선언 전에 접근하려고 하면 참조 에러(ReferenceError)가 발생합니다.
이는 let과 const가 '일시적 사각지대'를 가지는 이유입니다.

왜냐하면 let과 const는 선언이 코드의 실행 흐름에 도달했을 때 초기화되기 때문입니다. 
이는 var와는 다른 호이스팅 동작을 보여줍니다.

var는 함수 스코프와 호이스팅의 특성을 가지며, 글로벌 객체의 속성{var로 선언된 변수가 전역 스코프에서 접근 가능하다는 것을 의미}으로 추가됩니다. 
let과 const는 블록 스코프를 가지며, const는 재할당과 재선언이 불가능합니다.
